/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/billing_prices": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.billing_prices.id"];
          billing_product_id?: parameters["rowFilter.billing_prices.billing_product_id"];
          active?: parameters["rowFilter.billing_prices.active"];
          description?: parameters["rowFilter.billing_prices.description"];
          unit_amount?: parameters["rowFilter.billing_prices.unit_amount"];
          currency?: parameters["rowFilter.billing_prices.currency"];
          type?: parameters["rowFilter.billing_prices.type"];
          interval?: parameters["rowFilter.billing_prices.interval"];
          interval_count?: parameters["rowFilter.billing_prices.interval_count"];
          trial_period_days?: parameters["rowFilter.billing_prices.trial_period_days"];
          metadata?: parameters["rowFilter.billing_prices.metadata"];
          provider?: parameters["rowFilter.billing_prices.provider"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["billing_prices"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** billing_prices */
          billing_prices?: definitions["billing_prices"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.billing_prices.id"];
          billing_product_id?: parameters["rowFilter.billing_prices.billing_product_id"];
          active?: parameters["rowFilter.billing_prices.active"];
          description?: parameters["rowFilter.billing_prices.description"];
          unit_amount?: parameters["rowFilter.billing_prices.unit_amount"];
          currency?: parameters["rowFilter.billing_prices.currency"];
          type?: parameters["rowFilter.billing_prices.type"];
          interval?: parameters["rowFilter.billing_prices.interval"];
          interval_count?: parameters["rowFilter.billing_prices.interval_count"];
          trial_period_days?: parameters["rowFilter.billing_prices.trial_period_days"];
          metadata?: parameters["rowFilter.billing_prices.metadata"];
          provider?: parameters["rowFilter.billing_prices.provider"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.billing_prices.id"];
          billing_product_id?: parameters["rowFilter.billing_prices.billing_product_id"];
          active?: parameters["rowFilter.billing_prices.active"];
          description?: parameters["rowFilter.billing_prices.description"];
          unit_amount?: parameters["rowFilter.billing_prices.unit_amount"];
          currency?: parameters["rowFilter.billing_prices.currency"];
          type?: parameters["rowFilter.billing_prices.type"];
          interval?: parameters["rowFilter.billing_prices.interval"];
          interval_count?: parameters["rowFilter.billing_prices.interval_count"];
          trial_period_days?: parameters["rowFilter.billing_prices.trial_period_days"];
          metadata?: parameters["rowFilter.billing_prices.metadata"];
          provider?: parameters["rowFilter.billing_prices.provider"];
        };
        body: {
          /** billing_prices */
          billing_prices?: definitions["billing_prices"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/billing_products": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.billing_products.id"];
          active?: parameters["rowFilter.billing_products.active"];
          name?: parameters["rowFilter.billing_products.name"];
          description?: parameters["rowFilter.billing_products.description"];
          image?: parameters["rowFilter.billing_products.image"];
          metadata?: parameters["rowFilter.billing_products.metadata"];
          provider?: parameters["rowFilter.billing_products.provider"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["billing_products"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** billing_products */
          billing_products?: definitions["billing_products"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.billing_products.id"];
          active?: parameters["rowFilter.billing_products.active"];
          name?: parameters["rowFilter.billing_products.name"];
          description?: parameters["rowFilter.billing_products.description"];
          image?: parameters["rowFilter.billing_products.image"];
          metadata?: parameters["rowFilter.billing_products.metadata"];
          provider?: parameters["rowFilter.billing_products.provider"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.billing_products.id"];
          active?: parameters["rowFilter.billing_products.active"];
          name?: parameters["rowFilter.billing_products.name"];
          description?: parameters["rowFilter.billing_products.description"];
          image?: parameters["rowFilter.billing_products.image"];
          metadata?: parameters["rowFilter.billing_products.metadata"];
          provider?: parameters["rowFilter.billing_products.provider"];
        };
        body: {
          /** billing_products */
          billing_products?: definitions["billing_products"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/billing_customers": {
    get: {
      parameters: {
        query: {
          account_id?: parameters["rowFilter.billing_customers.account_id"];
          customer_id?: parameters["rowFilter.billing_customers.customer_id"];
          email?: parameters["rowFilter.billing_customers.email"];
          active?: parameters["rowFilter.billing_customers.active"];
          provider?: parameters["rowFilter.billing_customers.provider"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["billing_customers"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** billing_customers */
          billing_customers?: definitions["billing_customers"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          account_id?: parameters["rowFilter.billing_customers.account_id"];
          customer_id?: parameters["rowFilter.billing_customers.customer_id"];
          email?: parameters["rowFilter.billing_customers.email"];
          active?: parameters["rowFilter.billing_customers.active"];
          provider?: parameters["rowFilter.billing_customers.provider"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          account_id?: parameters["rowFilter.billing_customers.account_id"];
          customer_id?: parameters["rowFilter.billing_customers.customer_id"];
          email?: parameters["rowFilter.billing_customers.email"];
          active?: parameters["rowFilter.billing_customers.active"];
          provider?: parameters["rowFilter.billing_customers.provider"];
        };
        body: {
          /** billing_customers */
          billing_customers?: definitions["billing_customers"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/profiles": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          name?: parameters["rowFilter.profiles.name"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          created_at?: parameters["rowFilter.profiles.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["profiles"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          name?: parameters["rowFilter.profiles.name"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          created_at?: parameters["rowFilter.profiles.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.profiles.id"];
          name?: parameters["rowFilter.profiles.name"];
          updated_at?: parameters["rowFilter.profiles.updated_at"];
          created_at?: parameters["rowFilter.profiles.created_at"];
        };
        body: {
          /** profiles */
          profiles?: definitions["profiles"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/billing_subscriptions": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.billing_subscriptions.id"];
          account_id?: parameters["rowFilter.billing_subscriptions.account_id"];
          status?: parameters["rowFilter.billing_subscriptions.status"];
          metadata?: parameters["rowFilter.billing_subscriptions.metadata"];
          price_id?: parameters["rowFilter.billing_subscriptions.price_id"];
          quantity?: parameters["rowFilter.billing_subscriptions.quantity"];
          cancel_at_period_end?: parameters["rowFilter.billing_subscriptions.cancel_at_period_end"];
          created?: parameters["rowFilter.billing_subscriptions.created"];
          current_period_start?: parameters["rowFilter.billing_subscriptions.current_period_start"];
          current_period_end?: parameters["rowFilter.billing_subscriptions.current_period_end"];
          ended_at?: parameters["rowFilter.billing_subscriptions.ended_at"];
          cancel_at?: parameters["rowFilter.billing_subscriptions.cancel_at"];
          canceled_at?: parameters["rowFilter.billing_subscriptions.canceled_at"];
          trial_start?: parameters["rowFilter.billing_subscriptions.trial_start"];
          trial_end?: parameters["rowFilter.billing_subscriptions.trial_end"];
          provider?: parameters["rowFilter.billing_subscriptions.provider"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["billing_subscriptions"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** billing_subscriptions */
          billing_subscriptions?: definitions["billing_subscriptions"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.billing_subscriptions.id"];
          account_id?: parameters["rowFilter.billing_subscriptions.account_id"];
          status?: parameters["rowFilter.billing_subscriptions.status"];
          metadata?: parameters["rowFilter.billing_subscriptions.metadata"];
          price_id?: parameters["rowFilter.billing_subscriptions.price_id"];
          quantity?: parameters["rowFilter.billing_subscriptions.quantity"];
          cancel_at_period_end?: parameters["rowFilter.billing_subscriptions.cancel_at_period_end"];
          created?: parameters["rowFilter.billing_subscriptions.created"];
          current_period_start?: parameters["rowFilter.billing_subscriptions.current_period_start"];
          current_period_end?: parameters["rowFilter.billing_subscriptions.current_period_end"];
          ended_at?: parameters["rowFilter.billing_subscriptions.ended_at"];
          cancel_at?: parameters["rowFilter.billing_subscriptions.cancel_at"];
          canceled_at?: parameters["rowFilter.billing_subscriptions.canceled_at"];
          trial_start?: parameters["rowFilter.billing_subscriptions.trial_start"];
          trial_end?: parameters["rowFilter.billing_subscriptions.trial_end"];
          provider?: parameters["rowFilter.billing_subscriptions.provider"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.billing_subscriptions.id"];
          account_id?: parameters["rowFilter.billing_subscriptions.account_id"];
          status?: parameters["rowFilter.billing_subscriptions.status"];
          metadata?: parameters["rowFilter.billing_subscriptions.metadata"];
          price_id?: parameters["rowFilter.billing_subscriptions.price_id"];
          quantity?: parameters["rowFilter.billing_subscriptions.quantity"];
          cancel_at_period_end?: parameters["rowFilter.billing_subscriptions.cancel_at_period_end"];
          created?: parameters["rowFilter.billing_subscriptions.created"];
          current_period_start?: parameters["rowFilter.billing_subscriptions.current_period_start"];
          current_period_end?: parameters["rowFilter.billing_subscriptions.current_period_end"];
          ended_at?: parameters["rowFilter.billing_subscriptions.ended_at"];
          cancel_at?: parameters["rowFilter.billing_subscriptions.cancel_at"];
          canceled_at?: parameters["rowFilter.billing_subscriptions.canceled_at"];
          trial_start?: parameters["rowFilter.billing_subscriptions.trial_start"];
          trial_end?: parameters["rowFilter.billing_subscriptions.trial_end"];
          provider?: parameters["rowFilter.billing_subscriptions.provider"];
        };
        body: {
          /** billing_subscriptions */
          billing_subscriptions?: definitions["billing_subscriptions"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/accounts": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.accounts.id"];
          primary_owner_user_id?: parameters["rowFilter.accounts.primary_owner_user_id"];
          team_name?: parameters["rowFilter.accounts.team_name"];
          personal_account?: parameters["rowFilter.accounts.personal_account"];
          updated_at?: parameters["rowFilter.accounts.updated_at"];
          created_at?: parameters["rowFilter.accounts.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["accounts"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** accounts */
          accounts?: definitions["accounts"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.accounts.id"];
          primary_owner_user_id?: parameters["rowFilter.accounts.primary_owner_user_id"];
          team_name?: parameters["rowFilter.accounts.team_name"];
          personal_account?: parameters["rowFilter.accounts.personal_account"];
          updated_at?: parameters["rowFilter.accounts.updated_at"];
          created_at?: parameters["rowFilter.accounts.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.accounts.id"];
          primary_owner_user_id?: parameters["rowFilter.accounts.primary_owner_user_id"];
          team_name?: parameters["rowFilter.accounts.team_name"];
          personal_account?: parameters["rowFilter.accounts.personal_account"];
          updated_at?: parameters["rowFilter.accounts.updated_at"];
          created_at?: parameters["rowFilter.accounts.created_at"];
        };
        body: {
          /** accounts */
          accounts?: definitions["accounts"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/invitations": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.invitations.id"];
          account_role?: parameters["rowFilter.invitations.account_role"];
          account_id?: parameters["rowFilter.invitations.account_id"];
          token?: parameters["rowFilter.invitations.token"];
          invited_by_user_id?: parameters["rowFilter.invitations.invited_by_user_id"];
          account_team_name?: parameters["rowFilter.invitations.account_team_name"];
          updated_at?: parameters["rowFilter.invitations.updated_at"];
          created_at?: parameters["rowFilter.invitations.created_at"];
          invitation_type?: parameters["rowFilter.invitations.invitation_type"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["invitations"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** invitations */
          invitations?: definitions["invitations"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.invitations.id"];
          account_role?: parameters["rowFilter.invitations.account_role"];
          account_id?: parameters["rowFilter.invitations.account_id"];
          token?: parameters["rowFilter.invitations.token"];
          invited_by_user_id?: parameters["rowFilter.invitations.invited_by_user_id"];
          account_team_name?: parameters["rowFilter.invitations.account_team_name"];
          updated_at?: parameters["rowFilter.invitations.updated_at"];
          created_at?: parameters["rowFilter.invitations.created_at"];
          invitation_type?: parameters["rowFilter.invitations.invitation_type"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.invitations.id"];
          account_role?: parameters["rowFilter.invitations.account_role"];
          account_id?: parameters["rowFilter.invitations.account_id"];
          token?: parameters["rowFilter.invitations.token"];
          invited_by_user_id?: parameters["rowFilter.invitations.invited_by_user_id"];
          account_team_name?: parameters["rowFilter.invitations.account_team_name"];
          updated_at?: parameters["rowFilter.invitations.updated_at"];
          created_at?: parameters["rowFilter.invitations.created_at"];
          invitation_type?: parameters["rowFilter.invitations.invitation_type"];
        };
        body: {
          /** invitations */
          invitations?: definitions["invitations"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/account_user": {
    get: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.account_user.user_id"];
          account_id?: parameters["rowFilter.account_user.account_id"];
          account_role?: parameters["rowFilter.account_user.account_role"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["account_user"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** account_user */
          account_user?: definitions["account_user"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.account_user.user_id"];
          account_id?: parameters["rowFilter.account_user.account_id"];
          account_role?: parameters["rowFilter.account_user.account_role"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          user_id?: parameters["rowFilter.account_user.user_id"];
          account_id?: parameters["rowFilter.account_user.account_id"];
          account_role?: parameters["rowFilter.account_user.account_role"];
        };
        body: {
          /** account_user */
          account_user?: definitions["account_user"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/accept_invitation": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            lookup_invitation_token: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/current_user_account_role": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: uuid */
            lookup_account_id: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/lookup_invitation": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            lookup_invitation_token: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  billing_prices: {
    /**
     * Format: text
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /**
     * Format: text
     * @description Note:
     * This is a Foreign Key to `billing_products.id`.<fk table='billing_products' column='id'/>
     */
    billing_product_id?: string;
    /** Format: boolean */
    active?: boolean;
    /** Format: text */
    description?: string;
    /** Format: bigint */
    unit_amount?: number;
    /** Format: text */
    currency?: string;
    /**
     * Format: pricing_type
     * @enum {string}
     */
    type?: "one_time" | "recurring";
    /**
     * Format: pricing_plan_interval
     * @enum {string}
     */
    interval?: "day" | "week" | "month" | "year";
    /** Format: integer */
    interval_count?: number;
    /** Format: integer */
    trial_period_days?: number;
    /** Format: jsonb */
    metadata?: unknown;
    /**
     * Format: billing_providers
     * @enum {string}
     */
    provider?: "stripe";
  };
  billing_products: {
    /**
     * Format: text
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: boolean */
    active?: boolean;
    /** Format: text */
    name?: string;
    /** Format: text */
    description?: string;
    /** Format: text */
    image?: string;
    /** Format: jsonb */
    metadata?: unknown;
    /**
     * Format: billing_providers
     * @enum {string}
     */
    provider?: "stripe";
  };
  billing_customers: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `accounts.id`.<fk table='accounts' column='id'/>
     */
    account_id: string;
    /** Format: text */
    customer_id?: string;
    /** Format: text */
    email?: string;
    /** Format: boolean */
    active?: boolean;
    /**
     * Format: billing_providers
     * @enum {string}
     */
    provider?: "stripe";
  };
  profiles: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: text */
    name?: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: timestamp with time zone */
    created_at?: string;
  };
  billing_subscriptions: {
    /**
     * Format: text
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `accounts.id`.<fk table='accounts' column='id'/>
     */
    account_id: string;
    /**
     * Format: subscription_status
     * @enum {string}
     */
    status?:
      | "trialing"
      | "active"
      | "canceled"
      | "incomplete"
      | "incomplete_expired"
      | "past_due"
      | "unpaid";
    /** Format: jsonb */
    metadata?: unknown;
    /**
     * Format: text
     * @description Note:
     * This is a Foreign Key to `billing_prices.id`.<fk table='billing_prices' column='id'/>
     */
    price_id?: string;
    /** Format: integer */
    quantity?: number;
    /** Format: boolean */
    cancel_at_period_end?: boolean;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    created: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    current_period_start: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    current_period_end: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    ended_at?: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    cancel_at?: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    canceled_at?: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    trial_start?: string;
    /**
     * Format: timestamp with time zone
     * @default timezone('utc'::text, now())
     */
    trial_end?: string;
    /**
     * Format: billing_providers
     * @enum {string}
     */
    provider?: "stripe";
  };
  accounts: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default uuid_generate_v4()
     */
    id: string;
    /**
     * Format: uuid
     * @default auth.uid()
     */
    primary_owner_user_id: string;
    /** Format: text */
    team_name?: string;
    /**
     * Format: boolean
     * @default false
     */
    personal_account: boolean;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: timestamp with time zone */
    created_at?: string;
  };
  invitations: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default uuid_generate_v4()
     */
    id: string;
    /**
     * Format: account_role
     * @enum {string}
     */
    account_role: "owner" | "member";
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `accounts.id`.<fk table='accounts' column='id'/>
     */
    account_id: string;
    /**
     * Format: text
     * @default basejump.generate_token(30)
     */
    token: string;
    /** Format: uuid */
    invited_by_user_id: string;
    /** Format: text */
    account_team_name?: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: timestamp with time zone */
    created_at?: string;
    /**
     * Format: invitation_type
     * @enum {string}
     */
    invitation_type: "one-time" | "24-hour";
  };
  account_user: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `profiles.id`.<fk table='profiles' column='id'/>
     */
    user_id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `accounts.id`.<fk table='accounts' column='id'/>
     */
    account_id: string;
    /**
     * Format: account_role
     * @enum {string}
     */
    account_role: "owner" | "member";
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description billing_prices */
  "body.billing_prices": definitions["billing_prices"];
  /** Format: text */
  "rowFilter.billing_prices.id": string;
  /** Format: text */
  "rowFilter.billing_prices.billing_product_id": string;
  /** Format: boolean */
  "rowFilter.billing_prices.active": string;
  /** Format: text */
  "rowFilter.billing_prices.description": string;
  /** Format: bigint */
  "rowFilter.billing_prices.unit_amount": string;
  /** Format: text */
  "rowFilter.billing_prices.currency": string;
  /** Format: pricing_type */
  "rowFilter.billing_prices.type": string;
  /** Format: pricing_plan_interval */
  "rowFilter.billing_prices.interval": string;
  /** Format: integer */
  "rowFilter.billing_prices.interval_count": string;
  /** Format: integer */
  "rowFilter.billing_prices.trial_period_days": string;
  /** Format: jsonb */
  "rowFilter.billing_prices.metadata": string;
  /** Format: billing_providers */
  "rowFilter.billing_prices.provider": string;
  /** @description billing_products */
  "body.billing_products": definitions["billing_products"];
  /** Format: text */
  "rowFilter.billing_products.id": string;
  /** Format: boolean */
  "rowFilter.billing_products.active": string;
  /** Format: text */
  "rowFilter.billing_products.name": string;
  /** Format: text */
  "rowFilter.billing_products.description": string;
  /** Format: text */
  "rowFilter.billing_products.image": string;
  /** Format: jsonb */
  "rowFilter.billing_products.metadata": string;
  /** Format: billing_providers */
  "rowFilter.billing_products.provider": string;
  /** @description billing_customers */
  "body.billing_customers": definitions["billing_customers"];
  /** Format: uuid */
  "rowFilter.billing_customers.account_id": string;
  /** Format: text */
  "rowFilter.billing_customers.customer_id": string;
  /** Format: text */
  "rowFilter.billing_customers.email": string;
  /** Format: boolean */
  "rowFilter.billing_customers.active": string;
  /** Format: billing_providers */
  "rowFilter.billing_customers.provider": string;
  /** @description profiles */
  "body.profiles": definitions["profiles"];
  /** Format: uuid */
  "rowFilter.profiles.id": string;
  /** Format: text */
  "rowFilter.profiles.name": string;
  /** Format: timestamp with time zone */
  "rowFilter.profiles.updated_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.profiles.created_at": string;
  /** @description billing_subscriptions */
  "body.billing_subscriptions": definitions["billing_subscriptions"];
  /** Format: text */
  "rowFilter.billing_subscriptions.id": string;
  /** Format: uuid */
  "rowFilter.billing_subscriptions.account_id": string;
  /** Format: subscription_status */
  "rowFilter.billing_subscriptions.status": string;
  /** Format: jsonb */
  "rowFilter.billing_subscriptions.metadata": string;
  /** Format: text */
  "rowFilter.billing_subscriptions.price_id": string;
  /** Format: integer */
  "rowFilter.billing_subscriptions.quantity": string;
  /** Format: boolean */
  "rowFilter.billing_subscriptions.cancel_at_period_end": string;
  /** Format: timestamp with time zone */
  "rowFilter.billing_subscriptions.created": string;
  /** Format: timestamp with time zone */
  "rowFilter.billing_subscriptions.current_period_start": string;
  /** Format: timestamp with time zone */
  "rowFilter.billing_subscriptions.current_period_end": string;
  /** Format: timestamp with time zone */
  "rowFilter.billing_subscriptions.ended_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.billing_subscriptions.cancel_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.billing_subscriptions.canceled_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.billing_subscriptions.trial_start": string;
  /** Format: timestamp with time zone */
  "rowFilter.billing_subscriptions.trial_end": string;
  /** Format: billing_providers */
  "rowFilter.billing_subscriptions.provider": string;
  /** @description accounts */
  "body.accounts": definitions["accounts"];
  /** Format: uuid */
  "rowFilter.accounts.id": string;
  /** Format: uuid */
  "rowFilter.accounts.primary_owner_user_id": string;
  /** Format: text */
  "rowFilter.accounts.team_name": string;
  /** Format: boolean */
  "rowFilter.accounts.personal_account": string;
  /** Format: timestamp with time zone */
  "rowFilter.accounts.updated_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.accounts.created_at": string;
  /** @description invitations */
  "body.invitations": definitions["invitations"];
  /** Format: uuid */
  "rowFilter.invitations.id": string;
  /** Format: account_role */
  "rowFilter.invitations.account_role": string;
  /** Format: uuid */
  "rowFilter.invitations.account_id": string;
  /** Format: text */
  "rowFilter.invitations.token": string;
  /** Format: uuid */
  "rowFilter.invitations.invited_by_user_id": string;
  /** Format: text */
  "rowFilter.invitations.account_team_name": string;
  /** Format: timestamp with time zone */
  "rowFilter.invitations.updated_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.invitations.created_at": string;
  /** Format: invitation_type */
  "rowFilter.invitations.invitation_type": string;
  /** @description account_user */
  "body.account_user": definitions["account_user"];
  /** Format: uuid */
  "rowFilter.account_user.user_id": string;
  /** Format: uuid */
  "rowFilter.account_user.account_id": string;
  /** Format: account_role */
  "rowFilter.account_user.account_role": string;
}

export interface operations {}

export interface external {}
